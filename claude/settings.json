{
  "cleanupPeriodDays": 30,
  "env": {
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "BASH_DEFAULT_TIMEOUT_MS": "120000",
    "BASH_MAX_TIMEOUT_MS": "600000"
  },
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(pwd:*)",
      "Bash(cd:*)",
      "Bash(npm:*)",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(npm lint:*)",
      "Bash(npm build:*)",
      "Bash(pnpm:*)",
      "Bash(yarn:*)",
      "Bash(bun:*)",
      "Bash(pip:*)",
      "Bash(pip3:*)",
      "Bash(gem:*)",
      "Bash(cargo:*)",
      "Bash(go get:*)",
      "Bash(go mod:*)",
      "Bash(uv:*)",
      "Bash(git:*)",
      "Bash(git:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git rebase:*)",
      "Bash(git stash:*)",
      "Bash(git clone:*)",
      "Bash(git fetch:*)",
      "Bash(gh:*)",
      "Bash(gh:*)",
      "Bash(node:*)",
      "Bash(python:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(pytest:*)",
      "Bash(ruby:*)",
      "Bash(go:*)",
      "Bash(rustc:*)",
      "Bash(java:*)",
      "Bash(javac:*)",
      "Bash(dotnet:*)",
      "Bash(make:*)",
      "Bash(make:*)",
      "Bash(cmake:*)",
      "Bash(webpack:*)",
      "Bash(vite:*)",
      "Bash(tsc:*)",
      "Bash(babel:*)",
      "Bash(mvn:*)",
      "Bash(gradle:*)",
      "Bash(jest:*)",
      "Bash(vitest:*)",
      "Bash(mocha:*)",
      "Bash(cypress:*)",
      "Bash(playwright:*)",
      "Bash(eslint:*)",
      "Bash(npx eslint:*)",
      "Bash(prettier:*)",
      "Bash(npx prettier:*)",
      "Bash(black:*)",
      "Bash(ruff:*)",
      "Bash(rubocop:*)",
      "Bash(gofmt:*)",
      "Bash(rustfmt:*)",
      "Bash(echo:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(chmod:*)",
      "Bash(ps:*)",
      "Bash(kill:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Read(~/.gitconfig)",
      "Read(~/.ssh/config)",
      "Edit(**.py)",
      "Edit(**.js)",
      "Edit(**.ts)",
      "Edit(**.tsx)",
      "Edit(**.json)",
      "Edit(**.md)",
      "Edit(**.yml)",
      "Edit(**.yaml)",
      "Edit(**.toml)",
      "Edit(**.sh)",
      "Edit(Makefile)",
      "Edit(.gitignore)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:npmjs.com)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(sudo:*)",
      "Edit(~/.ssh/id_*)",
      "Read(~/.ssh/id_*)"
    ]
  },
  "model": "opus",
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(test(\"\\\\.(ts|tsx)$\"))' | xargs -I {} sh -c 'pnpm tsc --noEmit \"{}\" >&2; [ $? -eq 1 ] && exit 2 || true' --"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(test(\"\\\\.(js|jsx|ts|tsx)$\"))' | xargs -I {} sh -c 'pnpm prettier --write \"{}\" >&2; [ $? -eq 1 ] && exit 2 || true' --"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(endswith(\".py\"))' | xargs -I {} sh -c 'uv run black --check \"{}\" >&2; [ $? -eq 1 ] && exit 2 || true' --"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(endswith(\".py\"))' | xargs -I {} sh -c 'uv run ruff check --fix \"{}\" >&2; [ $? -eq 1 ] && exit 2 || true' --"
          },
          {
            "type": "command",
            "command": "jq -r '\"\\(.tool_name) - \\(.tool_input.file_path)\"' >> ~/.claude/tool-use-log.txt || exit 2"
          }
        ]
      }
    ]
  }
}
